//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Fantasy.API.DataAccess.Models.MSSQL.Fantasy
{
    public class Game
    {
        #region Primitive Properties
    
        public long GameId
        {
            get; set;
        }
    
        public System.DateTime Scheduled
        {
            get; set;
        }
    
        public double Humidity
        {
            get; set;
        }
    
        public double Temperture
        {
            get; set;
        }
    
        public long VenueId
        {
    get { return _venueId; }
            set
            {
                if (_venueId != value)
                {
                    if (Venue != null && Venue.VenueId != value)
                    {
                        Venue = null;
                    }
                    _venueId = value;
                }
            }
        }
        private long _venueId;

        #endregion

        #region Navigation Properties
    
        public Team AwayTeam
        {
            get { return _awayTeam; }
            set
            {
                if (!ReferenceEquals(_awayTeam, value))
                {
                    var previousValue = _awayTeam;
                    _awayTeam = value;
                    FixupAwayTeam(previousValue);
                }
            }
        }
        private Team _awayTeam;
    
        public Team HomeTeam
        {
            get { return _homeTeam; }
            set
            {
                if (!ReferenceEquals(_homeTeam, value))
                {
                    var previousValue = _homeTeam;
                    _homeTeam = value;
                    FixupHomeTeam(previousValue);
                }
            }
        }
        private Team _homeTeam;
    
        public ClimaConditions ClimaCondition
        {
            get { return _climaCondition; }
            set
            {
                if (!ReferenceEquals(_climaCondition, value))
                {
                    var previousValue = _climaCondition;
                    _climaCondition = value;
                    FixupClimaCondition(previousValue);
                }
            }
        }
        private ClimaConditions _climaCondition;
    
        public ICollection<ContestGame> ContestGames
        {
            get
            {
                if (_contestGames == null)
                {
                    var newCollection = new FixupCollection<ContestGame>();
                    newCollection.CollectionChanged += FixupContestGames;
                    _contestGames = newCollection;
                }
                return _contestGames;
            }
            set
            {
                if (!ReferenceEquals(_contestGames, value))
                {
                    var previousValue = _contestGames as FixupCollection<ContestGame>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupContestGames;
                    }
                    _contestGames = value;
                    var newValue = value as FixupCollection<ContestGame>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupContestGames;
                    }
                }
            }
        }
        private ICollection<ContestGame> _contestGames;
    
        public Venue Venue
        {
            get { return _venue; }
            set
            {
                if (!ReferenceEquals(_venue, value))
                {
                    var previousValue = _venue;
                    _venue = value;
                    FixupVenue(previousValue);
                }
            }
        }
        private Venue _venue;

        #endregion

        #region Association Fixup
    
        private void FixupAwayTeam(Team previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.AwayGame, this))
            {
                previousValue.AwayGame = null;
            }
    
            if (AwayTeam != null)
            {
                AwayTeam.AwayGame = this;
            }
        }
    
        private void FixupHomeTeam(Team previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.HomeGame, this))
            {
                previousValue.HomeGame = null;
            }
    
            if (HomeTeam != null)
            {
                HomeTeam.HomeGame = this;
            }
        }
    
        private void FixupClimaCondition(ClimaConditions previousValue)
        {
            if (previousValue != null && previousValue.Games.Contains(this))
            {
                previousValue.Games.Remove(this);
            }
    
            if (ClimaCondition != null)
            {
                if (!ClimaCondition.Games.Contains(this))
                {
                    ClimaCondition.Games.Add(this);
                }
            }
        }
    
        private void FixupVenue(Venue previousValue)
        {
            if (previousValue != null && previousValue.Games.Contains(this))
            {
                previousValue.Games.Remove(this);
            }
    
            if (Venue != null)
            {
                if (!Venue.Games.Contains(this))
                {
                    Venue.Games.Add(this);
                }
                if (VenueId != Venue.VenueId)
                {
                    VenueId = Venue.VenueId;
                }
            }
        }
    
        private void FixupContestGames(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ContestGame item in e.NewItems)
                {
                    item.Game = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ContestGame item in e.OldItems)
                {
                    if (ReferenceEquals(item.Game, this))
                    {
                        item.Game = null;
                    }
                }
            }
        }

        #endregion

    }
}
