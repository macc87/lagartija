//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Fantasy.API.DataAccess.Models.MSSQL.Fantasy
{
    public class Contest
    {
        #region Primitive Properties
    
        public long ContestId
        {
            get; set;
        }
    
        public long ContestTypeId
        {
    get { return _contestTypeId; }
            set
            {
                if (_contestTypeId != value)
                {
                    if (ContestType != null && ContestType.ContestTypeId != value)
                    {
                        ContestType = null;
                    }
                    _contestTypeId = value;
                }
            }
        }
        private long _contestTypeId;
    
        public string Name
        {
            get; set;
        }
    
        public int SignedUp
        {
            get; set;
        }
    
        public int MaxCapacity
        {
            get; set;
        }
    
        public double EntryFee
        {
            get; set;
        }
    
        public double SalaryCap
        {
            get; set;
        }

        #endregion

        #region Navigation Properties
    
        public ContestType ContestType
        {
            get { return _contestType; }
            set
            {
                if (!ReferenceEquals(_contestType, value))
                {
                    var previousValue = _contestType;
                    _contestType = value;
                    FixupContestType(previousValue);
                }
            }
        }
        private ContestType _contestType;
    
        public ICollection<ContestGame> ContestGame
        {
            get
            {
                if (_contestGame == null)
                {
                    var newCollection = new FixupCollection<ContestGame>();
                    newCollection.CollectionChanged += FixupContestGame;
                    _contestGame = newCollection;
                }
                return _contestGame;
            }
            set
            {
                if (!ReferenceEquals(_contestGame, value))
                {
                    var previousValue = _contestGame as FixupCollection<ContestGame>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupContestGame;
                    }
                    _contestGame = value;
                    var newValue = value as FixupCollection<ContestGame>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupContestGame;
                    }
                }
            }
        }
        private ICollection<ContestGame> _contestGame;
    
        public ICollection<ContestLineup> ContestLineups
        {
            get
            {
                if (_contestLineups == null)
                {
                    var newCollection = new FixupCollection<ContestLineup>();
                    newCollection.CollectionChanged += FixupContestLineups;
                    _contestLineups = newCollection;
                }
                return _contestLineups;
            }
            set
            {
                if (!ReferenceEquals(_contestLineups, value))
                {
                    var previousValue = _contestLineups as FixupCollection<ContestLineup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupContestLineups;
                    }
                    _contestLineups = value;
                    var newValue = value as FixupCollection<ContestLineup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupContestLineups;
                    }
                }
            }
        }
        private ICollection<ContestLineup> _contestLineups;

        #endregion

        #region Association Fixup
    
        private void FixupContestType(ContestType previousValue)
        {
            if (previousValue != null && previousValue.Contests.Contains(this))
            {
                previousValue.Contests.Remove(this);
            }
    
            if (ContestType != null)
            {
                if (!ContestType.Contests.Contains(this))
                {
                    ContestType.Contests.Add(this);
                }
                if (ContestTypeId != ContestType.ContestTypeId)
                {
                    ContestTypeId = ContestType.ContestTypeId;
                }
            }
        }
    
        private void FixupContestGame(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ContestGame item in e.NewItems)
                {
                    item.Contests = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ContestGame item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contests, this))
                    {
                        item.Contests = null;
                    }
                }
            }
        }
    
        private void FixupContestLineups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ContestLineup item in e.NewItems)
                {
                    item.Contest = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ContestLineup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contest, this))
                    {
                        item.Contest = null;
                    }
                }
            }
        }

        #endregion

    }
}
