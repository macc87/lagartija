//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Fantasy.API.DataAccess.Models.MSSQL.Fantasy
{
    public class Account
    {
        #region Primitive Properties
    
        public string Login
        {
            get; set;
        }
    
        public string Email
        {
            get; set;
        }
    
        public string Password
        {
            get; set;
        }

        #endregion

        #region Navigation Properties
    
        public ICollection<LineUp> LineUps
        {
            get
            {
                if (_lineUps == null)
                {
                    var newCollection = new FixupCollection<LineUp>();
                    newCollection.CollectionChanged += FixupLineUps;
                    _lineUps = newCollection;
                }
                return _lineUps;
            }
            set
            {
                if (!ReferenceEquals(_lineUps, value))
                {
                    var previousValue = _lineUps as FixupCollection<LineUp>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLineUps;
                    }
                    _lineUps = value;
                    var newValue = value as FixupCollection<LineUp>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLineUps;
                    }
                }
            }
        }
        private ICollection<LineUp> _lineUps;
    
        public ICollection<Notification> Notifications
        {
            get
            {
                if (_notifications == null)
                {
                    var newCollection = new FixupCollection<Notification>();
                    newCollection.CollectionChanged += FixupNotifications;
                    _notifications = newCollection;
                }
                return _notifications;
            }
            set
            {
                if (!ReferenceEquals(_notifications, value))
                {
                    var previousValue = _notifications as FixupCollection<Notification>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupNotifications;
                    }
                    _notifications = value;
                    var newValue = value as FixupCollection<Notification>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupNotifications;
                    }
                }
            }
        }
        private ICollection<Notification> _notifications;

        #endregion

        #region Association Fixup
    
        private void FixupLineUps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LineUp item in e.NewItems)
                {
                    item.Account = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LineUp item in e.OldItems)
                {
                    if (ReferenceEquals(item.Account, this))
                    {
                        item.Account = null;
                    }
                }
            }
        }
    
        private void FixupNotifications(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Notification item in e.NewItems)
                {
                    item.Account = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Notification item in e.OldItems)
                {
                    if (ReferenceEquals(item.Account, this))
                    {
                        item.Account = null;
                    }
                }
            }
        }

        #endregion

    }
}
