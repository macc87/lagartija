//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Fantasy.API.DataAccess.Models.MSSQL.Fantasy
{
    public class Position
    {
        #region Primitive Properties
    
        public int PositionId
        {
            get; set;
        }
    
        public string PositionName
        {
            get; set;
        }
    
        public int SportId
        {
    get { return _sportId; }
            set
            {
                if (_sportId != value)
                {
                    if (Sport != null && Sport.SportId != value)
                    {
                        Sport = null;
                    }
                    _sportId = value;
                }
            }
        }
        private int _sportId;

        #endregion

        #region Navigation Properties
    
        public ICollection<Player> Players
        {
            get
            {
                if (_players == null)
                {
                    var newCollection = new FixupCollection<Player>();
                    newCollection.CollectionChanged += FixupPlayers;
                    _players = newCollection;
                }
                return _players;
            }
            set
            {
                if (!ReferenceEquals(_players, value))
                {
                    var previousValue = _players as FixupCollection<Player>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPlayers;
                    }
                    _players = value;
                    var newValue = value as FixupCollection<Player>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPlayers;
                    }
                }
            }
        }
        private ICollection<Player> _players;
    
        public Sport Sport
        {
            get { return _sport; }
            set
            {
                if (!ReferenceEquals(_sport, value))
                {
                    var previousValue = _sport;
                    _sport = value;
                    FixupSport(previousValue);
                }
            }
        }
        private Sport _sport;

        #endregion

        #region Association Fixup
    
        private void FixupSport(Sport previousValue)
        {
            if (previousValue != null && previousValue.Positions.Contains(this))
            {
                previousValue.Positions.Remove(this);
            }
    
            if (Sport != null)
            {
                if (!Sport.Positions.Contains(this))
                {
                    Sport.Positions.Add(this);
                }
                if (SportId != Sport.SportId)
                {
                    SportId = Sport.SportId;
                }
            }
        }
    
        private void FixupPlayers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Player item in e.NewItems)
                {
                    item.Position = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Player item in e.OldItems)
                {
                    if (ReferenceEquals(item.Position, this))
                    {
                        item.Position = null;
                    }
                }
            }
        }

        #endregion

    }
}
