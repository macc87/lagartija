//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Fantasy.API.DataAccess.Models.MSSQL.Fantasy
{
    public class Position
    {
        #region Primitive Properties
    
        public int PositionId
        {
            get; set;
        }
    
        public string PositionName
        {
            get; set;
        }
    
        public string SportId
        {
            get; set;
        }

        #endregion

        #region Navigation Properties
    
        public ICollection<Sport> Sports
        {
            get
            {
                if (_sports == null)
                {
                    var newCollection = new FixupCollection<Sport>();
                    newCollection.CollectionChanged += FixupSports;
                    _sports = newCollection;
                }
                return _sports;
            }
            set
            {
                if (!ReferenceEquals(_sports, value))
                {
                    var previousValue = _sports as FixupCollection<Sport>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSports;
                    }
                    _sports = value;
                    var newValue = value as FixupCollection<Sport>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSports;
                    }
                }
            }
        }
        private ICollection<Sport> _sports;
    
        public ICollection<Player> Players
        {
            get
            {
                if (_players == null)
                {
                    var newCollection = new FixupCollection<Player>();
                    newCollection.CollectionChanged += FixupPlayers;
                    _players = newCollection;
                }
                return _players;
            }
            set
            {
                if (!ReferenceEquals(_players, value))
                {
                    var previousValue = _players as FixupCollection<Player>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPlayers;
                    }
                    _players = value;
                    var newValue = value as FixupCollection<Player>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPlayers;
                    }
                }
            }
        }
        private ICollection<Player> _players;

        #endregion

        #region Association Fixup
    
        private void FixupSports(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Sport item in e.NewItems)
                {
                    item.Position = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Sport item in e.OldItems)
                {
                    if (ReferenceEquals(item.Position, this))
                    {
                        item.Position = null;
                    }
                }
            }
        }
    
        private void FixupPlayers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Player item in e.NewItems)
                {
                    item.Position = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Player item in e.OldItems)
                {
                    if (ReferenceEquals(item.Position, this))
                    {
                        item.Position = null;
                    }
                }
            }
        }

        #endregion

    }
}
