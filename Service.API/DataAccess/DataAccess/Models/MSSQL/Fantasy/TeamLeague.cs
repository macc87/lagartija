//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Fantasy.API.DataAccess.Models.MSSQL.Fantasy
{
    public class TeamLeague
    {
        #region Primitive Properties
    
        public long Id
        {
            get; set;
        }
    
        public long TeamTeamId
        {
    get { return _teamTeamId; }
            set
            {
                if (_teamTeamId != value)
                {
                    if (Team != null && Team.TeamId != value)
                    {
                        Team = null;
                    }
                    _teamTeamId = value;
                }
            }
        }
        private long _teamTeamId;
    
        public long LeagueLeagueId
        {
    get { return _leagueLeagueId; }
            set
            {
                if (_leagueLeagueId != value)
                {
                    if (League != null && League.LeagueId != value)
                    {
                        League = null;
                    }
                    _leagueLeagueId = value;
                }
            }
        }
        private long _leagueLeagueId;

        #endregion

        #region Navigation Properties
    
        public Team Team
        {
            get { return _team; }
            set
            {
                if (!ReferenceEquals(_team, value))
                {
                    var previousValue = _team;
                    _team = value;
                    FixupTeam(previousValue);
                }
            }
        }
        private Team _team;
    
        public League League
        {
            get { return _league; }
            set
            {
                if (!ReferenceEquals(_league, value))
                {
                    var previousValue = _league;
                    _league = value;
                    FixupLeague(previousValue);
                }
            }
        }
        private League _league;

        #endregion

        #region Association Fixup
    
        private void FixupTeam(Team previousValue)
        {
            if (previousValue != null && previousValue.TeamLeagues.Contains(this))
            {
                previousValue.TeamLeagues.Remove(this);
            }
    
            if (Team != null)
            {
                if (!Team.TeamLeagues.Contains(this))
                {
                    Team.TeamLeagues.Add(this);
                }
                if (TeamTeamId != Team.TeamId)
                {
                    TeamTeamId = Team.TeamId;
                }
            }
        }
    
        private void FixupLeague(League previousValue)
        {
            if (previousValue != null && previousValue.TeamLeagues.Contains(this))
            {
                previousValue.TeamLeagues.Remove(this);
            }
    
            if (League != null)
            {
                if (!League.TeamLeagues.Contains(this))
                {
                    League.TeamLeagues.Add(this);
                }
                if (LeagueLeagueId != League.LeagueId)
                {
                    LeagueLeagueId = League.LeagueId;
                }
            }
        }

        #endregion

    }
}
